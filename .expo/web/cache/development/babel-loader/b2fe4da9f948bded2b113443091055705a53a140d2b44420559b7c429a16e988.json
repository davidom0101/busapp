{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nimport Constants from 'expo-constants';\nimport * as Localization from 'expo-localization';\nvar RNVersionCheck;\nif (process.env.RNVC_ENV === 'test') {\n  RNVersionCheck = {\n    country: 'ko',\n    packageName: 'com.reactnative.versioncheck',\n    currentBuildNumber: 1,\n    currentVersion: '0.0.1'\n  };\n} else {\n  var manifest = Constants.manifest ? Constants.manifest : Constants.manifest2.extra.expoClient;\n  var _manifest$version = manifest.version,\n    version = _manifest$version === void 0 ? null : _manifest$version,\n    _manifest$android = manifest.android;\n  _manifest$android = _manifest$android === void 0 ? {} : _manifest$android;\n  var _manifest$android$ver = _manifest$android.versionCode,\n    versionCode = _manifest$android$ver === void 0 ? null : _manifest$android$ver,\n    _manifest$android$pac = _manifest$android.package,\n    androidPackageName = _manifest$android$pac === void 0 ? null : _manifest$android$pac,\n    _manifest$ios = manifest.ios;\n  _manifest$ios = _manifest$ios === void 0 ? {} : _manifest$ios;\n  var _manifest$ios$bundleI = _manifest$ios.bundleIdentifier,\n    bundleIdentifier = _manifest$ios$bundleI === void 0 ? null : _manifest$ios$bundleI,\n    _manifest$ios$buildNu = _manifest$ios.buildNumber,\n    buildNumber = _manifest$ios$buildNu === void 0 ? null : _manifest$ios$buildNu;\n  var country;\n  if (Constants.expoVersion < 31) {\n    country = Localization.getCurrentDeviceCountryAsync();\n  } else {\n    country = Localization.country ? Localization.country : Localization.region;\n  }\n  RNVersionCheck = {\n    currentVersion: version,\n    country: country,\n    currentBuildNumber: Platform.select({\n      android: versionCode,\n      ios: buildNumber\n    }),\n    packageName: Platform.select({\n      android: androidPackageName,\n      ios: bundleIdentifier\n    })\n  };\n}\nvar COUNTRY = RNVersionCheck.country;\nvar PACKAGE_NAME = RNVersionCheck.packageName;\nvar CURRENT_BUILD_NUMBER = RNVersionCheck.currentBuildNumber;\nvar CURRENT_VERSION = RNVersionCheck.currentVersion;\nexport default {\n  getCountry: function getCountry() {\n    return Promise.resolve(COUNTRY);\n  },\n  getPackageName: function getPackageName() {\n    return PACKAGE_NAME;\n  },\n  getCurrentBuildNumber: function getCurrentBuildNumber() {\n    return CURRENT_BUILD_NUMBER;\n  },\n  getCurrentVersion: function getCurrentVersion() {\n    return CURRENT_VERSION;\n  }\n};","map":{"version":3,"names":["Constants","Localization","RNVersionCheck","process","env","RNVC_ENV","country","packageName","currentBuildNumber","currentVersion","manifest","manifest2","extra","expoClient","_manifest$version","version","_manifest$android","android","_manifest$android$ver","versionCode","_manifest$android$pac","package","androidPackageName","_manifest$ios","ios","_manifest$ios$bundleI","bundleIdentifier","_manifest$ios$buildNu","buildNumber","expoVersion","getCurrentDeviceCountryAsync","region","Platform","select","COUNTRY","PACKAGE_NAME","CURRENT_BUILD_NUMBER","CURRENT_VERSION","getCountry","Promise","resolve","getPackageName","getCurrentBuildNumber","getCurrentVersion"],"sources":["C:/repos/reactnative/BarryCoach/BarryCoach/node_modules/react-native-version-check-expo/src/ExpoVersionInfo.js"],"sourcesContent":["import { Platform } from 'react-native';\nimport Constants from 'expo-constants';\nimport * as Localization from 'expo-localization';\n\nlet RNVersionCheck;\nif (process.env.RNVC_ENV === 'test') {\n  RNVersionCheck = {\n    country: 'ko',\n    packageName: 'com.reactnative.versioncheck',\n    currentBuildNumber: 1,\n    currentVersion: '0.0.1',\n  };\n} else {\n  const manifest = Constants.manifest\n    ? Constants.manifest\n    : Constants.manifest2.extra.expoClient;\n  const {\n    version = null,\n    android: { versionCode = null, package: androidPackageName = null } = {},\n    ios: { bundleIdentifier = null, buildNumber = null } = {},\n  } = manifest;\n  let country;\n  if (Constants.expoVersion < 31) {\n    country = Localization.getCurrentDeviceCountryAsync();\n  } else {\n    // if can't return country use region instead\n    country = Localization.country ? Localization.country : Localization.region;\n  }\n\n  RNVersionCheck = {\n    currentVersion: version,\n    country,\n    currentBuildNumber: Platform.select({\n      android: versionCode,\n      ios: buildNumber,\n    }),\n    packageName: Platform.select({\n      android: androidPackageName,\n      ios: bundleIdentifier,\n    }),\n  };\n}\n\nconst COUNTRY = RNVersionCheck.country;\nconst PACKAGE_NAME = RNVersionCheck.packageName;\nconst CURRENT_BUILD_NUMBER = RNVersionCheck.currentBuildNumber;\nconst CURRENT_VERSION = RNVersionCheck.currentVersion;\n\nexport default {\n  getCountry: () => Promise.resolve(COUNTRY),\n  getPackageName: () => PACKAGE_NAME,\n  getCurrentBuildNumber: () => CURRENT_BUILD_NUMBER,\n  getCurrentVersion: () => CURRENT_VERSION,\n};\n"],"mappings":";AACA,OAAOA,SAAS,MAAM,gBAAgB;AACtC,OAAO,KAAKC,YAAY,MAAM,mBAAmB;AAEjD,IAAIC,cAAc;AAClB,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;EACnCH,cAAc,GAAG;IACfI,OAAO,EAAE,IAAI;IACbC,WAAW,EAAE,8BAA8B;IAC3CC,kBAAkB,EAAE,CAAC;IACrBC,cAAc,EAAE;EAClB,CAAC;AACH,CAAC,MAAM;EACL,IAAMC,QAAQ,GAAGV,SAAS,CAACU,QAAQ,GAC/BV,SAAS,CAACU,QAAQ,GAClBV,SAAS,CAACW,SAAS,CAACC,KAAK,CAACC,UAAU;EACxC,IAAAC,iBAAA,GAIIJ,QAAQ,CAHVK,OAAO;IAAPA,OAAO,GAAAD,iBAAA,cAAG,IAAI,GAAAA,iBAAA;IAAAE,iBAAA,GAGZN,QAAQ,CAFVO,OAAO;EAFTD,iBAAA,GAAAA,iBAAA,cAEwE,CAAC,CAAC,GAAAA,iBAAA;EAF1E,IAAAE,qBAAA,GAAAF,iBAAA,CAEaG,WAAW;IAAXA,WAAW,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAE,qBAAA,GAAAJ,iBAAA,CAAEK,OAAO;IAAEC,kBAAkB,GAAAF,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAG,aAAA,GAE/Db,QAAQ,CADVc,GAAG;EAHLD,aAAA,GAAAA,aAAA,cAGyD,CAAC,CAAC,GAAAA,aAAA;EAH3D,IAAAE,qBAAA,GAAAF,aAAA,CAGSG,gBAAgB;IAAhBA,gBAAgB,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAE,qBAAA,GAAAJ,aAAA,CAAEK,WAAW;IAAXA,WAAW,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;EAEpD,IAAIrB,OAAO;EACX,IAAIN,SAAS,CAAC6B,WAAW,GAAG,EAAE,EAAE;IAC9BvB,OAAO,GAAGL,YAAY,CAAC6B,4BAA4B,EAAE;EACvD,CAAC,MAAM;IAELxB,OAAO,GAAGL,YAAY,CAACK,OAAO,GAAGL,YAAY,CAACK,OAAO,GAAGL,YAAY,CAAC8B,MAAM;EAC7E;EAEA7B,cAAc,GAAG;IACfO,cAAc,EAAEM,OAAO;IACvBT,OAAO,EAAPA,OAAO;IACPE,kBAAkB,EAAEwB,QAAQ,CAACC,MAAM,CAAC;MAClChB,OAAO,EAAEE,WAAW;MACpBK,GAAG,EAAEI;IACP,CAAC,CAAC;IACFrB,WAAW,EAAEyB,QAAQ,CAACC,MAAM,CAAC;MAC3BhB,OAAO,EAAEK,kBAAkB;MAC3BE,GAAG,EAAEE;IACP,CAAC;EACH,CAAC;AACH;AAEA,IAAMQ,OAAO,GAAGhC,cAAc,CAACI,OAAO;AACtC,IAAM6B,YAAY,GAAGjC,cAAc,CAACK,WAAW;AAC/C,IAAM6B,oBAAoB,GAAGlC,cAAc,CAACM,kBAAkB;AAC9D,IAAM6B,eAAe,GAAGnC,cAAc,CAACO,cAAc;AAErD,eAAe;EACb6B,UAAU,EAAE,SAAAA,WAAA;IAAA,OAAMC,OAAO,CAACC,OAAO,CAACN,OAAO,CAAC;EAAA;EAC1CO,cAAc,EAAE,SAAAA,eAAA;IAAA,OAAMN,YAAY;EAAA;EAClCO,qBAAqB,EAAE,SAAAA,sBAAA;IAAA,OAAMN,oBAAoB;EAAA;EACjDO,iBAAiB,EAAE,SAAAA,kBAAA;IAAA,OAAMN,eAAe;EAAA;AAC1C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}