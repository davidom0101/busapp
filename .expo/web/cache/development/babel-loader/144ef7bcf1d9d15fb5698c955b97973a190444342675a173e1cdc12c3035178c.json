{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { getVersionInfo } from \"../versionInfo\";\nimport { IProvider, IVersionAndStoreUrl } from \"./types\";\nfunction error(text) {\n  return {\n    message: \"Parse Error. Your app's play store page doesn't seem to have latest app version info.\",\n    text: text\n  };\n}\nvar PlayStoreProvider = function () {\n  function PlayStoreProvider() {\n    _classCallCheck(this, PlayStoreProvider);\n  }\n  _createClass(PlayStoreProvider, [{\n    key: \"getVersion\",\n    value: function getVersion(option) {\n      var opt = option || {};\n      try {\n        if (!opt.packageName) {\n          opt.packageName = getVersionInfo().getPackageName();\n        }\n        opt.fetchOptions = _objectSpread({\n          headers: {\n            'sec-fetch-site': 'same-origin'\n          }\n        }, opt.fetchOptions);\n        var storeUrl = \"https://play.google.com/store/apps/details?id=\" + opt.packageName + \"&hl=en&gl=US\";\n        return fetch(storeUrl, opt.fetchOptions).then(function (res) {\n          return res.text();\n        }).then(function (text) {\n          var match = text.match(/Current Version.+?>([\\d.-]+)<\\/span>/);\n          if (match) {\n            var latestVersion = match[1].trim();\n            return Promise.resolve({\n              version: latestVersion,\n              storeUrl: storeUrl\n            });\n          }\n          var matchNewLayout = text.match(/\\[\\[\\[\"([\\d.]+?)\"\\]\\]/);\n          if (matchNewLayout) {\n            var _latestVersion = matchNewLayout[1].trim();\n            return Promise.resolve({\n              version: _latestVersion,\n              storeUrl: storeUrl\n            });\n          }\n          return Promise.reject(error(text));\n        });\n      } catch (e) {\n        if (opt.ignoreErrors) {\n          console.warn(e);\n        } else {\n          throw e;\n        }\n      }\n    }\n  }]);\n  return PlayStoreProvider;\n}();\nexport default new PlayStoreProvider();","map":{"version":3,"names":["getVersionInfo","IProvider","IVersionAndStoreUrl","error","text","message","PlayStoreProvider","_classCallCheck","_createClass","key","value","getVersion","option","opt","packageName","getPackageName","fetchOptions","_objectSpread","headers","storeUrl","fetch","then","res","match","latestVersion","trim","Promise","resolve","version","matchNewLayout","reject","e","ignoreErrors","console","warn"],"sources":["C:/repos/reactnative/BarryCoach/BarryCoach/node_modules/react-native-version-check/src/providers/playStore.js"],"sourcesContent":["// @flow\nimport { getVersionInfo } from '../versionInfo';\n\nimport { IProvider, IVersionAndStoreUrl } from './types';\n\nexport type PlayStoreGetVersionOption = {\n  packageName?: string,\n  fetchOptions?: any,\n  ignoreErrors?: boolean,\n};\n\nexport interface IPlayStoreProvider extends IProvider {\n  getVersion: PlayStoreGetVersionOption => Promise<IVersionAndStoreUrl>;\n}\n\nfunction error(text: string) {\n  return {\n    message:\n      \"Parse Error. Your app's play store page doesn't seem to have latest app version info.\",\n    text,\n  };\n}\n\nclass PlayStoreProvider implements IProvider {\n  getVersion(option: PlayStoreGetVersionOption): Promise<IVersionAndStoreUrl> {\n    const opt = option || {};\n    try {\n      if (!opt.packageName) {\n        opt.packageName = getVersionInfo().getPackageName();\n      }\n\n      opt.fetchOptions = {\n        headers: { 'sec-fetch-site': 'same-origin' },\n        ...opt.fetchOptions,\n      };\n\n      const storeUrl = `https://play.google.com/store/apps/details?id=${opt.packageName}&hl=en&gl=US`;\n\n      return fetch(storeUrl, opt.fetchOptions)\n        .then(res => res.text())\n        .then(text => {\n          const match = text.match(/Current Version.+?>([\\d.-]+)<\\/span>/);\n          if (match) {\n            const latestVersion = match[1].trim();\n\n            return Promise.resolve({ version: latestVersion, storeUrl });\n          }\n\n          const matchNewLayout = text.match(/\\[\\[\\[\"([\\d.]+?)\"\\]\\]/);\n          if (matchNewLayout) {\n            const latestVersion = matchNewLayout[1].trim();\n\n            return Promise.resolve({ version: latestVersion, storeUrl });\n          }\n\n          return Promise.reject(error(text));\n        });\n    } catch (e) {\n      if (opt.ignoreErrors) {\n        console.warn(e); // eslint-disable-line no-console\n      } else {\n        throw e;\n      }\n    }\n  }\n}\n\nexport default new PlayStoreProvider();\n"],"mappings":";;;;;AACA,SAASA,cAAc;AAEvB,SAASC,SAAS,EAAEC,mBAAmB;AAYvC,SAASC,KAAKA,CAACC,IAAY,EAAE;EAC3B,OAAO;IACLC,OAAO,EACL,uFAAuF;IACzFD,IAAI,EAAJA;EACF,CAAC;AACH;AAAC,IAEKE,iBAAiB;EAAA,SAAAA,kBAAA;IAAAC,eAAA,OAAAD,iBAAA;EAAA;EAAAE,YAAA,CAAAF,iBAAA;IAAAG,GAAA;IAAAC,KAAA,EACrB,SAAAC,WAAWC,MAAiC,EAAgC;MAC1E,IAAMC,GAAG,GAAGD,MAAM,IAAI,CAAC,CAAC;MACxB,IAAI;QACF,IAAI,CAACC,GAAG,CAACC,WAAW,EAAE;UACpBD,GAAG,CAACC,WAAW,GAAGd,cAAc,EAAE,CAACe,cAAc,EAAE;QACrD;QAEAF,GAAG,CAACG,YAAY,GAAAC,aAAA;UACdC,OAAO,EAAE;YAAE,gBAAgB,EAAE;UAAc;QAAC,GACzCL,GAAG,CAACG,YAAY,CACpB;QAED,IAAMG,QAAQ,sDAAoDN,GAAG,CAACC,WAAW,iBAAc;QAE/F,OAAOM,KAAK,CAACD,QAAQ,EAAEN,GAAG,CAACG,YAAY,CAAC,CACrCK,IAAI,CAAC,UAAAC,GAAG;UAAA,OAAIA,GAAG,CAAClB,IAAI,EAAE;QAAA,EAAC,CACvBiB,IAAI,CAAC,UAAAjB,IAAI,EAAI;UACZ,IAAMmB,KAAK,GAAGnB,IAAI,CAACmB,KAAK,CAAC,sCAAsC,CAAC;UAChE,IAAIA,KAAK,EAAE;YACT,IAAMC,aAAa,GAAGD,KAAK,CAAC,CAAC,CAAC,CAACE,IAAI,EAAE;YAErC,OAAOC,OAAO,CAACC,OAAO,CAAC;cAAEC,OAAO,EAAEJ,aAAa;cAAEL,QAAQ,EAARA;YAAS,CAAC,CAAC;UAC9D;UAEA,IAAMU,cAAc,GAAGzB,IAAI,CAACmB,KAAK,CAAC,uBAAuB,CAAC;UAC1D,IAAIM,cAAc,EAAE;YAClB,IAAML,cAAa,GAAGK,cAAc,CAAC,CAAC,CAAC,CAACJ,IAAI,EAAE;YAE9C,OAAOC,OAAO,CAACC,OAAO,CAAC;cAAEC,OAAO,EAAEJ,cAAa;cAAEL,QAAQ,EAARA;YAAS,CAAC,CAAC;UAC9D;UAEA,OAAOO,OAAO,CAACI,MAAM,CAAC3B,KAAK,CAACC,IAAI,CAAC,CAAC;QACpC,CAAC,CAAC;MACN,CAAC,CAAC,OAAO2B,CAAC,EAAE;QACV,IAAIlB,GAAG,CAACmB,YAAY,EAAE;UACpBC,OAAO,CAACC,IAAI,CAACH,CAAC,CAAC;QACjB,CAAC,MAAM;UACL,MAAMA,CAAC;QACT;MACF;IACF;EAAC;EAAA,OAAAzB,iBAAA;AAAA;AAGH,eAAe,IAAIA,iBAAiB,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}