{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { getVersionInfo } from \"../versionInfo\";\nimport { IProvider, IVersionAndStoreUrl } from \"./types\";\nvar AppStoreProvider = function () {\n  function AppStoreProvider() {\n    _classCallCheck(this, AppStoreProvider);\n  }\n  _createClass(AppStoreProvider, [{\n    key: \"getVersion\",\n    value: function () {\n      var _getVersion = _asyncToGenerator(function* (option) {\n        var opt = option;\n        try {\n          if (!opt.country) {\n            opt.country = yield getVersionInfo().getCountry();\n          }\n          if (!opt.packageName) {\n            opt.packageName = getVersionInfo().getPackageName();\n          }\n          var countryCode = opt.country ? opt.country + \"/\" : '';\n          var dateNow = new Date().getTime();\n          return fetch(\"https://itunes.apple.com/\" + countryCode + \"lookup?bundleId=\" + opt.packageName + \"&date=\" + dateNow, opt.fetchOptions).then(function (res) {\n            return res.json();\n          }).then(function (json) {\n            if (json.resultCount) {\n              var version = json.results[0].version;\n              var appId = json.results[0].trackId;\n              var storeUrl = \"itms-apps://apps.apple.com/\" + countryCode + \"app/id\" + appId;\n              return Promise.resolve({\n                version: version,\n                storeUrl: storeUrl\n              });\n            }\n            return Promise.reject('No info about this app.');\n          });\n        } catch (e) {\n          if (opt.ignoreErrors) {\n            console.warn(e);\n          } else {\n            throw e;\n          }\n        }\n      });\n      function getVersion(_x) {\n        return _getVersion.apply(this, arguments);\n      }\n      return getVersion;\n    }()\n  }]);\n  return AppStoreProvider;\n}();\nexport default new AppStoreProvider();","map":{"version":3,"names":["getVersionInfo","IProvider","IVersionAndStoreUrl","AppStoreProvider","_classCallCheck","_createClass","key","value","_getVersion","_asyncToGenerator","option","opt","country","getCountry","packageName","getPackageName","countryCode","dateNow","Date","getTime","fetch","fetchOptions","then","res","json","resultCount","version","results","appId","trackId","storeUrl","Promise","resolve","reject","e","ignoreErrors","console","warn","getVersion","_x","apply","arguments"],"sources":["C:/repos/reactnative/BarryCoach/BarryCoach/node_modules/react-native-version-check/src/providers/appStore.js"],"sourcesContent":["// @flow\nimport { getVersionInfo } from '../versionInfo';\n\nimport { IProvider, IVersionAndStoreUrl } from './types';\n\nexport type AppStoreGetVersionOption = {\n  country?: string,\n  packageName?: string,\n  fetchOptions?: any,\n  ignoreErrors?: boolean,\n};\n\nexport interface IAppStoreProvider extends IProvider {\n  getVersion: AppStoreGetVersionOption => Promise<IVersionAndStoreUrl>;\n}\n\nclass AppStoreProvider implements IProvider {\n  async getVersion(\n    option: AppStoreGetVersionOption\n  ): Promise<IVersionAndStoreUrl> {\n    const opt = option;\n    try {\n      if (!opt.country) {\n        opt.country = await getVersionInfo().getCountry();\n      }\n      if (!opt.packageName) {\n        opt.packageName = getVersionInfo().getPackageName();\n      }\n      const countryCode = opt.country ? `${opt.country}/` : '';\n      const dateNow = new Date().getTime();\n\n      return fetch(\n        `https://itunes.apple.com/${countryCode}lookup?bundleId=${opt.packageName}&date=${dateNow}`,\n        opt.fetchOptions\n      )\n        .then(res => res.json())\n        .then(json => {\n          if (json.resultCount) {\n            const version = json.results[0].version;\n            const appId = json.results[0].trackId;\n            const storeUrl = `itms-apps://apps.apple.com/${countryCode}app/id${appId}`;\n            return Promise.resolve({\n              version,\n              storeUrl,\n            });\n          }\n          return Promise.reject('No info about this app.');\n        });\n    } catch (e) {\n      if (opt.ignoreErrors) {\n        console.warn(e); // eslint-disable-line no-console\n      } else {\n        throw e;\n      }\n    }\n  }\n}\n\nexport default new AppStoreProvider();\n"],"mappings":";;;AACA,SAASA,cAAc;AAEvB,SAASC,SAAS,EAAEC,mBAAmB;AAAkB,IAanDC,gBAAgB;EAAA,SAAAA,iBAAA;IAAAC,eAAA,OAAAD,gBAAA;EAAA;EAAAE,YAAA,CAAAF,gBAAA;IAAAG,GAAA;IAAAC,KAAA;MAAA,IAAAC,WAAA,GAAAC,iBAAA,CACpB,WACEC,MAAgC,EACF;QAC9B,IAAMC,GAAG,GAAGD,MAAM;QAClB,IAAI;UACF,IAAI,CAACC,GAAG,CAACC,OAAO,EAAE;YAChBD,GAAG,CAACC,OAAO,SAASZ,cAAc,EAAE,CAACa,UAAU,EAAE;UACnD;UACA,IAAI,CAACF,GAAG,CAACG,WAAW,EAAE;YACpBH,GAAG,CAACG,WAAW,GAAGd,cAAc,EAAE,CAACe,cAAc,EAAE;UACrD;UACA,IAAMC,WAAW,GAAGL,GAAG,CAACC,OAAO,GAAMD,GAAG,CAACC,OAAO,SAAM,EAAE;UACxD,IAAMK,OAAO,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;UAEpC,OAAOC,KAAK,+BACkBJ,WAAW,wBAAmBL,GAAG,CAACG,WAAW,cAASG,OAAO,EACzFN,GAAG,CAACU,YAAY,CACjB,CACEC,IAAI,CAAC,UAAAC,GAAG;YAAA,OAAIA,GAAG,CAACC,IAAI,EAAE;UAAA,EAAC,CACvBF,IAAI,CAAC,UAAAE,IAAI,EAAI;YACZ,IAAIA,IAAI,CAACC,WAAW,EAAE;cACpB,IAAMC,OAAO,GAAGF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACD,OAAO;cACvC,IAAME,KAAK,GAAGJ,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO;cACrC,IAAMC,QAAQ,mCAAiCd,WAAW,cAASY,KAAO;cAC1E,OAAOG,OAAO,CAACC,OAAO,CAAC;gBACrBN,OAAO,EAAPA,OAAO;gBACPI,QAAQ,EAARA;cACF,CAAC,CAAC;YACJ;YACA,OAAOC,OAAO,CAACE,MAAM,CAAC,yBAAyB,CAAC;UAClD,CAAC,CAAC;QACN,CAAC,CAAC,OAAOC,CAAC,EAAE;UACV,IAAIvB,GAAG,CAACwB,YAAY,EAAE;YACpBC,OAAO,CAACC,IAAI,CAACH,CAAC,CAAC;UACjB,CAAC,MAAM;YACL,MAAMA,CAAC;UACT;QACF;MACF,CAAC;MAAA,SAAAI,WAAAC,EAAA;QAAA,OAAA/B,WAAA,CAAAgC,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAH,UAAA;IAAA;EAAA;EAAA,OAAAnC,gBAAA;AAAA;AAGH,eAAe,IAAIA,gBAAgB,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}