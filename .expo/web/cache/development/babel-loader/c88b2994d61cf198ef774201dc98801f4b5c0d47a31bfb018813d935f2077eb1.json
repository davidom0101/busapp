{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport isNil from 'lodash.isnil';\nimport { getVersionInfo } from \"./versionInfo\";\nexport var getAppStoreUrl = function () {\n  var _ref = _asyncToGenerator(function* (option) {\n    var opt = option || {};\n    try {\n      if (isNil(opt.appID)) {\n        throw new Error('appID is empty.');\n      }\n      if (!opt.country) {\n        opt.country = yield getVersionInfo().getCountry();\n      }\n      var countryCode = opt.country ? opt.country + \"/\" : '';\n      return \"itms-apps://apps.apple.com/\" + countryCode + \"app/id\" + opt.appID;\n    } catch (e) {\n      if (opt.ignoreErrors) {\n        console.warn(e);\n      } else {\n        throw e;\n      }\n    }\n  });\n  return function getAppStoreUrl(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getPlayStoreUrl = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var opt = option || {};\n    try {\n      if (!opt.packageName) {\n        opt.packageName = yield getVersionInfo().getPackageName();\n      }\n      return \"https://play.google.com/store/apps/details?id=\" + opt.packageName;\n    } catch (e) {\n      if (opt.ignoreErrors) {\n        console.warn(e);\n      } else {\n        throw e;\n      }\n    }\n  });\n  return function getPlayStoreUrl() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport default (function () {\n  var _ref3 = _asyncToGenerator(function* (option) {\n    return Platform.select({\n      android: getPlayStoreUrl,\n      ios: getAppStoreUrl\n    })(option);\n  });\n  return function (_x2) {\n    return _ref3.apply(this, arguments);\n  };\n})();","map":{"version":3,"names":["isNil","getVersionInfo","getAppStoreUrl","_ref","_asyncToGenerator","option","opt","appID","Error","country","getCountry","countryCode","e","ignoreErrors","console","warn","_x","apply","arguments","getPlayStoreUrl","_ref2","length","undefined","packageName","getPackageName","_ref3","Platform","select","android","ios","_x2"],"sources":["C:/repos/reactnative/BarryCoach/BarryCoach/node_modules/react-native-version-check/src/getStoreUrl.js"],"sourcesContent":["// @flow\nimport { Platform } from 'react-native';\nimport isNil from 'lodash.isnil';\nimport { getVersionInfo } from './versionInfo';\n\nexport type GetAppStoreUrlOption = {\n  country?: string,\n  appID: string,\n  ignoreErrors?: boolean,\n};\n\nexport type GetPlayStoreUrlOption = {\n  packageName?: string,\n  ignoreErrors?: boolean,\n};\n\nexport type GetStoreUrlOption = GetAppStoreUrlOption & GetPlayStoreUrlOption;\n\nexport const getAppStoreUrl = async (\n  option: GetAppStoreUrlOption\n): Promise<string> => {\n  const opt = option || {};\n  try {\n    if (isNil(opt.appID)) {\n      throw new Error('appID is empty.');\n    }\n\n    if (!opt.country) {\n      opt.country = await getVersionInfo().getCountry();\n    }\n\n    const countryCode = opt.country ? `${opt.country}/` : '';\n\n    // Opens directly App Store\n    return `itms-apps://apps.apple.com/${countryCode}app/id${opt.appID}`;\n  } catch (e) {\n    if (opt.ignoreErrors) {\n      console.warn(e); // eslint-disable-line no-console\n    } else {\n      throw e;\n    }\n  }\n};\n\nexport const getPlayStoreUrl = async (\n  option: ?GetPlayStoreUrlOption = {}\n): Promise<string> => {\n  const opt = option || {};\n  try {\n    if (!opt.packageName) {\n      opt.packageName = await getVersionInfo().getPackageName();\n    }\n    return `https://play.google.com/store/apps/details?id=${opt.packageName}`;\n  } catch (e) {\n    if (opt.ignoreErrors) {\n      console.warn(e); // eslint-disable-line no-console\n    } else {\n      throw e;\n    }\n  }\n};\n\nexport default async (option: GetStoreUrlOption): Promise<string> =>\n  Platform.select({\n    android: getPlayStoreUrl,\n    ios: getAppStoreUrl,\n  })(option);\n"],"mappings":";;AAEA,OAAOA,KAAK,MAAM,cAAc;AAChC,SAASC,cAAc;AAevB,OAAO,IAAMC,cAAc;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAC5BC,MAA4B,EACR;IACpB,IAAMC,GAAG,GAAGD,MAAM,IAAI,CAAC,CAAC;IACxB,IAAI;MACF,IAAIL,KAAK,CAACM,GAAG,CAACC,KAAK,CAAC,EAAE;QACpB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;MACpC;MAEA,IAAI,CAACF,GAAG,CAACG,OAAO,EAAE;QAChBH,GAAG,CAACG,OAAO,SAASR,cAAc,EAAE,CAACS,UAAU,EAAE;MACnD;MAEA,IAAMC,WAAW,GAAGL,GAAG,CAACG,OAAO,GAAMH,GAAG,CAACG,OAAO,SAAM,EAAE;MAGxD,uCAAqCE,WAAW,cAASL,GAAG,CAACC,KAAK;IACpE,CAAC,CAAC,OAAOK,CAAC,EAAE;MACV,IAAIN,GAAG,CAACO,YAAY,EAAE;QACpBC,OAAO,CAACC,IAAI,CAACH,CAAC,CAAC;MACjB,CAAC,MAAM;QACL,MAAMA,CAAC;MACT;IACF;EACF,CAAC;EAAA,gBAxBYV,cAAcA,CAAAc,EAAA;IAAA,OAAAb,IAAA,CAAAc,KAAA,OAAAC,SAAA;EAAA;AAAA,GAwB1B;AAED,OAAO,IAAMC,eAAe;EAAA,IAAAC,KAAA,GAAAhB,iBAAA,CAAG,aAET;IAAA,IADpBC,MAA8B,GAAAa,SAAA,CAAAG,MAAA,QAAAH,SAAA,QAAAI,SAAA,GAAAJ,SAAA,MAAG,CAAC,CAAC;IAEnC,IAAMZ,GAAG,GAAGD,MAAM,IAAI,CAAC,CAAC;IACxB,IAAI;MACF,IAAI,CAACC,GAAG,CAACiB,WAAW,EAAE;QACpBjB,GAAG,CAACiB,WAAW,SAAStB,cAAc,EAAE,CAACuB,cAAc,EAAE;MAC3D;MACA,0DAAwDlB,GAAG,CAACiB,WAAW;IACzE,CAAC,CAAC,OAAOX,CAAC,EAAE;MACV,IAAIN,GAAG,CAACO,YAAY,EAAE;QACpBC,OAAO,CAACC,IAAI,CAACH,CAAC,CAAC;MACjB,CAAC,MAAM;QACL,MAAMA,CAAC;MACT;IACF;EACF,CAAC;EAAA,gBAhBYO,eAAeA,CAAA;IAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GAgB3B;AAED;EAAA,IAAAO,KAAA,GAAArB,iBAAA,CAAe,WAAOC,MAAyB;IAAA,OAC7CqB,QAAQ,CAACC,MAAM,CAAC;MACdC,OAAO,EAAET,eAAe;MACxBU,GAAG,EAAE3B;IACP,CAAC,CAAC,CAACG,MAAM,CAAC;EAAA;EAAA,iBAAAyB,GAAA;IAAA,OAAAL,KAAA,CAAAR,KAAA,OAAAC,SAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}