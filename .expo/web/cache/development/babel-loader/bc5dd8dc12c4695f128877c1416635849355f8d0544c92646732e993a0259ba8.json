{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useReducer, useMemo } from 'react';\nimport ExpoLocalization, { addCalendarListener, addLocaleListener, removeSubscription } from \"./ExpoLocalization\";\nexport * from \"./Localization.types\";\nexport var currency = ExpoLocalization.currency;\nexport var decimalSeparator = ExpoLocalization.decimalSeparator;\nexport var digitGroupingSeparator = ExpoLocalization.digitGroupingSeparator;\nexport var isoCurrencyCodes = ExpoLocalization.isoCurrencyCodes;\nexport var isMetric = ExpoLocalization.isMetric;\nexport var isRTL = ExpoLocalization.isRTL;\nexport var locale = ExpoLocalization.locale;\nexport var locales = ExpoLocalization.locales;\nexport var timezone = ExpoLocalization.timezone;\nexport var region = ExpoLocalization.region;\nexport var getLocales = ExpoLocalization.getLocales;\nexport var getCalendars = ExpoLocalization.getCalendars;\nexport function useLocales() {\n  var _useReducer = useReducer(function (k) {\n      return k + 1;\n    }, 0),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    key = _useReducer2[0],\n    invalidate = _useReducer2[1];\n  var locales = useMemo(function () {\n    return getLocales();\n  }, [key]);\n  useEffect(function () {\n    var subscription = addLocaleListener(invalidate);\n    return function () {\n      removeSubscription(subscription);\n    };\n  }, []);\n  return locales;\n}\nexport function useCalendars() {\n  var _useReducer3 = useReducer(function (k) {\n      return k + 1;\n    }, 0),\n    _useReducer4 = _slicedToArray(_useReducer3, 2),\n    key = _useReducer4[0],\n    invalidate = _useReducer4[1];\n  var calendars = useMemo(function () {\n    return getCalendars();\n  }, [key]);\n  useEffect(function () {\n    var subscription = addCalendarListener(invalidate);\n    return function () {\n      removeSubscription(subscription);\n    };\n  }, []);\n  return calendars;\n}\nexport function getLocalizationAsync() {\n  return _getLocalizationAsync.apply(this, arguments);\n}\nfunction _getLocalizationAsync() {\n  _getLocalizationAsync = _asyncToGenerator(function* () {\n    return yield ExpoLocalization.getLocalizationAsync();\n  });\n  return _getLocalizationAsync.apply(this, arguments);\n}","map":{"version":3,"names":["useEffect","useReducer","useMemo","ExpoLocalization","addCalendarListener","addLocaleListener","removeSubscription","currency","decimalSeparator","digitGroupingSeparator","isoCurrencyCodes","isMetric","isRTL","locale","locales","timezone","region","getLocales","getCalendars","useLocales","_useReducer","k","_useReducer2","_slicedToArray","key","invalidate","subscription","useCalendars","_useReducer3","_useReducer4","calendars","getLocalizationAsync","_getLocalizationAsync","apply","arguments","_asyncToGenerator"],"sources":["C:\\repos\\reactnative\\BarryCoach\\BarryCoach\\node_modules\\expo-localization\\src\\Localization.ts"],"sourcesContent":["import { useEffect, useReducer, useMemo } from 'react';\n\nimport ExpoLocalization, {\n  addCalendarListener,\n  addLocaleListener,\n  removeSubscription,\n} from './ExpoLocalization';\nimport { Localization } from './Localization.types';\nexport * from './Localization.types';\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * Three-character ISO 4217 currency code. Returns `null` on web.\n *\n * @example `'USD'`, `'EUR'`, `'CNY'`, `null`\n */\nexport const currency = ExpoLocalization.currency;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * Decimal separator used for formatting numbers.\n *\n * @example `','`, `'.'`\n */\nexport const decimalSeparator = ExpoLocalization.decimalSeparator;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * Digit grouping separator used when formatting numbers larger than 1000.\n *\n * @example `'.'`, `''`, `','`\n */\nexport const digitGroupingSeparator = ExpoLocalization.digitGroupingSeparator;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * A list of all the supported language ISO codes.\n */\nexport const isoCurrencyCodes = ExpoLocalization.isoCurrencyCodes;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * Boolean value that indicates whether the system uses the metric system.\n * On Android and web, this is inferred from the current region.\n */\nexport const isMetric = ExpoLocalization.isMetric;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * Returns if the system's language is written from Right-to-Left.\n * This can be used to build features like [bidirectional icons](https://material.io/design/usability/bidirectionality.html).\n *\n * Returns `false` in Server Side Rendering (SSR) environments.\n */\nexport const isRTL = ExpoLocalization.isRTL;\n\n// @needsAudit\n/**\n * Consider using Localization.getLocales() for a list of user preferred locales instead.\n * An [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag),\n * consisting of a two-character language code and optional script, region and variant codes.\n *\n * @example `'en'`, `'en-US'`, `'zh-Hans'`, `'zh-Hans-CN'`, `'en-emodeng'`\n */\nexport const locale = ExpoLocalization.locale;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * List of all the native languages provided by the user settings.\n * These are returned in the order the user defines in their device settings.\n *\n * @example `['en', 'en-US', 'zh-Hans', 'zh-Hans-CN', 'en-emodeng']`\n */\nexport const locales = ExpoLocalization.locales;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getCalendars() instead.\n * The current time zone in display format.\n * On Web time zone is calculated with Intl.DateTimeFormat().resolvedOptions().timeZone. For a\n * better estimation you could use the moment-timezone package but it will add significant bloat to\n * your website's bundle size.\n *\n * @example `'America/Los_Angeles'`\n */\nexport const timezone = ExpoLocalization.timezone;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * The region code for your device that comes from the Region setting under Language & Region on iOS.\n * This value is always available on iOS, but might return `null` on Android or web.\n *\n * @example `'US'`, `'NZ'`, `null`\n */\nexport const region = ExpoLocalization.region;\n\n/**\n * List of user's locales, returned as an array of objects of type `Locale`.\n * Guaranteed to contain at least 1 element.\n * These are returned in the order the user defines in their device settings.\n * On the web currency and measurements systems are not provided, instead returned as null.\n * If needed, you can infer them from the current region using a lookup table.\n * @example `[{\n    \"languageTag\": \"pl-PL\",\n    \"languageCode\": \"pl\",\n    \"textDirection\": \"ltr\",\n    \"digitGroupingSeparator\": \" \",\n    \"decimalSeparator\": \",\",\n    \"measurementSystem\": \"metric\",\n    \"currencyCode\": \"PLN\",\n    \"currencySymbol\": \"zł\",\n    \"regionCode\": \"PL\",\n    \"temperatureUnit\": \"celsius\"\n  }]`\n */\nexport const getLocales = ExpoLocalization.getLocales;\n\n/**\n * List of user's preferred calendars, returned as an array of objects of type `Calendar`.\n * Guaranteed to contain at least 1 element.\n * For now always returns a single element, but it's likely to return a user preference list on some platforms in the future.\n * @example `[\n    {\n      \"calendar\": \"gregory\",\n      \"timeZone\": \"Europe/Warsaw\",\n      \"uses24hourClock\": true,\n      \"firstWeekday\": 1\n    }\n  ]`\n */\nexport const getCalendars = ExpoLocalization.getCalendars;\n\n/**\n * A hook providing a list of user's locales, returned as an array of objects of type `Locale`.\n * Guaranteed to contain at least 1 element.\n * These are returned in the order the user defines in their device settings.\n * On the web currency and measurements systems are not provided, instead returned as null.\n * If needed, you can infer them from the current region using a lookup table.\n * If the OS settings change, the hook will rerender with a new list of locales.\n * @example `[{\n    \"languageTag\": \"pl-PL\",\n    \"languageCode\": \"pl\",\n    \"textDirection\": \"ltr\",\n    \"digitGroupingSeparator\": \" \",\n    \"decimalSeparator\": \",\",\n    \"measurementSystem\": \"metric\",\n    \"currencyCode\": \"PLN\",\n    \"currencySymbol\": \"zł\",\n    \"regionCode\": \"PL\",\n    \"temperatureUnit\": \"celsius\"\n  }]`\n */\nexport function useLocales() {\n  const [key, invalidate] = useReducer((k) => k + 1, 0);\n  const locales = useMemo(() => getLocales(), [key]);\n  useEffect(() => {\n    const subscription = addLocaleListener(invalidate);\n    return () => {\n      removeSubscription(subscription);\n    };\n  }, []);\n  return locales;\n}\n\n/**\n * A hook providing a list of user's preferred calendars, returned as an array of objects of type `Calendar`.\n * Guaranteed to contain at least 1 element.\n * For now always returns a single element, but it's likely to return a user preference list on some platforms in the future.\n * If the OS settings change, the hook will rerender with a new list of calendars.\n * @example `[\n    {\n      \"calendar\": \"gregory\",\n      \"timeZone\": \"Europe/Warsaw\",\n      \"uses24hourClock\": true,\n      \"firstWeekday\": 1\n    }\n  ]`\n */\nexport function useCalendars() {\n  const [key, invalidate] = useReducer((k) => k + 1, 0);\n  const calendars = useMemo(() => getCalendars(), [key]);\n  useEffect(() => {\n    const subscription = addCalendarListener(invalidate);\n    return () => {\n      removeSubscription(subscription);\n    };\n  }, []);\n  return calendars;\n}\n\n// @needsAudit\n/**\n * Get the latest native values from the device. Locale can be changed on some Android devices\n * without resetting the app.\n * > On iOS, changing the locale will cause the device to reset meaning the constants will always be\n * correct.\n *\n * @example\n * ```ts\n * // When the app returns from the background on Android...\n *\n * const { locale } = await Localization.getLocalizationAsync();\n * ```\n * @deprecated\n * Use Localization.getLocales() or Localization.getCalendars() instead.\n */\nexport async function getLocalizationAsync(): Promise<Localization> {\n  return await ExpoLocalization.getLocalizationAsync();\n}\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAEtD,OAAOC,gBAAgB,IACrBC,mBAAmB,EACnBC,iBAAiB,EACjBC,kBAAkB;AAGpB;AASA,OAAO,IAAMC,QAAQ,GAAGJ,gBAAgB,CAACI,QAAQ;AASjD,OAAO,IAAMC,gBAAgB,GAAGL,gBAAgB,CAACK,gBAAgB;AASjE,OAAO,IAAMC,sBAAsB,GAAGN,gBAAgB,CAACM,sBAAsB;AAO7E,OAAO,IAAMC,gBAAgB,GAAGP,gBAAgB,CAACO,gBAAgB;AAQjE,OAAO,IAAMC,QAAQ,GAAGR,gBAAgB,CAACQ,QAAQ;AAUjD,OAAO,IAAMC,KAAK,GAAGT,gBAAgB,CAACS,KAAK;AAU3C,OAAO,IAAMC,MAAM,GAAGV,gBAAgB,CAACU,MAAM;AAU7C,OAAO,IAAMC,OAAO,GAAGX,gBAAgB,CAACW,OAAO;AAY/C,OAAO,IAAMC,QAAQ,GAAGZ,gBAAgB,CAACY,QAAQ;AAUjD,OAAO,IAAMC,MAAM,GAAGb,gBAAgB,CAACa,MAAM;AAqB7C,OAAO,IAAMC,UAAU,GAAGd,gBAAgB,CAACc,UAAU;AAerD,OAAO,IAAMC,YAAY,GAAGf,gBAAgB,CAACe,YAAY;AAsBzD,OAAM,SAAUC,UAAUA,CAAA;EACxB,IAAAC,WAAA,GAA0BnB,UAAU,CAAC,UAACoB,CAAC;MAAA,OAAKA,CAAC,GAAG,CAAC;IAAA,GAAE,CAAC,CAAC;IAAAC,YAAA,GAAAC,cAAA,CAAAH,WAAA;IAA9CI,GAAG,GAAAF,YAAA;IAAEG,UAAU,GAAAH,YAAA;EACtB,IAAMR,OAAO,GAAGZ,OAAO,CAAC;IAAA,OAAMe,UAAU,EAAE;EAAA,GAAE,CAACO,GAAG,CAAC,CAAC;EAClDxB,SAAS,CAAC,YAAK;IACb,IAAM0B,YAAY,GAAGrB,iBAAiB,CAACoB,UAAU,CAAC;IAClD,OAAO,YAAK;MACVnB,kBAAkB,CAACoB,YAAY,CAAC;IAClC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN,OAAOZ,OAAO;AAChB;AAgBA,OAAM,SAAUa,YAAYA,CAAA;EAC1B,IAAAC,YAAA,GAA0B3B,UAAU,CAAC,UAACoB,CAAC;MAAA,OAAKA,CAAC,GAAG,CAAC;IAAA,GAAE,CAAC,CAAC;IAAAQ,YAAA,GAAAN,cAAA,CAAAK,YAAA;IAA9CJ,GAAG,GAAAK,YAAA;IAAEJ,UAAU,GAAAI,YAAA;EACtB,IAAMC,SAAS,GAAG5B,OAAO,CAAC;IAAA,OAAMgB,YAAY,EAAE;EAAA,GAAE,CAACM,GAAG,CAAC,CAAC;EACtDxB,SAAS,CAAC,YAAK;IACb,IAAM0B,YAAY,GAAGtB,mBAAmB,CAACqB,UAAU,CAAC;IACpD,OAAO,YAAK;MACVnB,kBAAkB,CAACoB,YAAY,CAAC;IAClC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN,OAAOI,SAAS;AAClB;AAkBA,gBAAsBC,oBAAoBA,CAAA;EAAA,OAAAC,qBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAEzC,SAAAF,sBAAA;EAAAA,qBAAA,GAAAG,iBAAA,CAFM,aAAmC;IACxC,aAAahC,gBAAgB,CAAC4B,oBAAoB,EAAE;EACtD,CAAC;EAAA,OAAAC,qBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}